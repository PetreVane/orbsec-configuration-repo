version: '2.1'

services:

  license-database:
    image: postgres:latest
    ports:
      - "5432:5432"

    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_DB: "orbsec_dev_license"

    volumes:
        - ./init.sql:/docker-entrypoint-initdb.d/1-init.sql
        - ./data.sql:/docker-entrypoint-initdb.d/2-data.sql

    networks:
      backend:
        aliases:
          - "license-database"

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # organization-database:
  #   image: postgres:latest
  #   ports:
  #     - "5433:5432"
  #
  #   environment:
  #     POSTGRES_USER: "postgres"
  #     POSTGRES_PASSWORD: "postgres"
  #     POSTGRES_DB: "orbsec_dev_organization"
  #
  #   volumes:
  #       - ./init.sql:/docker-entrypoint-initdb.d/1-init.sql
  #       - ./data.sql:/docker-entrypoint-initdb.d/2-data.sql
  #
  #   networks:
  #     backend:
  #       aliases:
  #         - "organization-database"
  #
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U postgres"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

  config-service:
    image: orbsec/config-service:0.0.1-SNAPSHOT
    ports:
       - "8071:8071"

    environment:
      - spring.application.name=config-service
      - spring.profiles.active=native
      - encrypt.key=super-secret-encryption-key
      - spring.cloud.config.server.native.search-locations=classpath:/config
      - management.endpoints.web.exposure.include=*

      # SPRING_ PROFILES_ACTIVE: "native"
      # ENCRYPT_KEY: "super-secret-encryption-key"
      # SPRING_CLOUD_CONFIG_SERVER_NATIVE_SEARCH-LOCATIONS: "Github"


    networks:
      backend:
        aliases:
          - "config-service"

  discovery-service:
    image: orbsec/discovery-service:0.0.1-SNAPSHOT
    ports:
       - "8070:8070"

    environment:
      - server.port=8070
      - spring.cloud.config.uri=http://config-service:8071
      - spring.profiles.active=dev
      - eureka.client.registerWithEureka='false'
      - eureka.client.fetchRegistry='false'
      # SERVER_PORT: '8070'
      # SPRING_CLOUD_CONFIG_URI: "http://config-service:8071"
      # SPRING_ PROFILES_ACTIVE: 'default'


    depends_on:
      license-database:
        condition: service_healthy
      config-service:
        condition: service_started


    networks:
      backend:
        aliases:
          - "discovery-service"

  licensingservice:
    image: orbsec/licensing-service:0.0.1-SNAPSHOT

    environment:
      - server.port=8080
      - spring.cloud.config.uri="http://config-service:8071"
      - spring.profiles.active=dev
      - database.server.port=5432
      - spring.datasource.url=jdbc:postgresql://license-database:5432/orbsec_dev_license
      - spring.datasource.username=postgres
      - spring.datasource.password=postgres
      - eureka.client.service-url.defaultZone="http://discovery-service:8070/eureka"



    depends_on:
      license-database:
        condition: service_healthy
      configserver:
        condition: service_started
      discovery-service:
        condition: service_started

    ports:
      - "8080:8080"
    networks:
      - backend

  # organizationservice:
  #   image: orbsec/organization-service:0.0.1-SNAPSHOT
  #
  #   environment:
  #     SPRING_CLOUD_CONFIG_URI: "http://config-service:8071"
  #     SPRING_ PROFILES_ACTIVE: dev
  #     DATABASESERVER_PORT: "5433"
  #     ENCRYPT_KEY:       "2b535344f640de02ec93cab7f6407085541896e672480d3d8118d35fea44d00478f506f248a47a2b2866f5c85531df4e"
  #     CONFIGSERVICE_PORT:   "8071"
          # EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: "http://discovery-service:8070/eureka"
  #
  #   depends_on:
  #     organization-database:
  #       condition: service_healthy
  #     configserver:
  #       condition: service_started
  #     discovery-service:
  #         condition: service_started
  #
  #   ports:
  #     - "8081:8081"
  #   networks:
  #     - backend

networks:
  backend:
    driver: bridge
