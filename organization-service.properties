spring.application.name=organization-service
server.port=${PORT:7005}
spring.main.allow-circular-references=true

# Actuator
management.endpoints.web.exposure.include = *
management.endpoints.enabled-by-default=true

# Discovery Service connection properties
eureka.instance.hostname=${spring.application.name}:${server.port:${random.value}}

# Database
spring.datasource.url=jdbc:postgresql://organization-database:5432/orbsec_dev_organization
spring.datasource.username=postgres
spring.datasource.password=postgres

spring.jpa.hibernate.ddl-auto=update
spring.jpa.database=POSTGRESQL
spring.datasource.platform=postgres
spring.jpa.show-sql=true
spring.jpa.hibernate.naming-strategy=org.hibernate.cfg.ImprovedNamingStrategy
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.database.driverClassName=org.postgresql.Driver
spring.datasource.testWhileIdle=true
spring.datasource.validationQuery=SELECT 1

# Resilience Circuit Breaker - organization database
resilience4j.circuitbreaker.instances.organizationDatabase.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.organizationDatabase.ringBufferSizeInClosedState=6
resilience4j.circuitbreaker.instances.organizationDatabase.ringBufferSizeInHalfOpenState=4
resilience4j.circuitbreaker.instances.organizationDatabase.waitDurationInOpenState=3s
resilience4j.circuitbreaker.instances.organizationDatabase.failureRateThreshold=60
# Exceptions
resilience4j.circuitbreaker.instances.organizationDatabase.recordExceptions=java.io.IOException
resilience4j.circuitbreaker.instances.organizationDatabase.recordExceptions=java.util.concurrent.TimeoutException
resilience4j.circuitbreaker.instances.organizationDatabase.recordExceptions=org.springframework.web.client.ResourceAccessException
resilience4j.circuitbreaker.instances.organizationDatabase.recordExceptions=org.springframework.web.client.HttpServerErrorException

# Resilience Circuit Breaker - feign client -> licensing service
resilience4j.circuitbreaker.instances.licensingService.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.licensingService.ringBufferSizeInClosedState=6
resilience4j.circuitbreaker.instances.licensingService.ringBufferSizeInHalfOpenState=4
resilience4j.circuitbreaker.instances.licensingService.waitDurationInOpenState=3s
resilience4j.circuitbreaker.instances.licensingService.failureRateThreshold=60
# Exceptions
resilience4j.circuitbreaker.instances.licensingService.recordExceptions=java.io.IOException
resilience4j.circuitbreaker.instances.licensingService.recordExceptions=java.util.concurrent.TimeoutException
resilience4j.circuitbreaker.instances.licensingService.recordExceptions=org.springframework.web.client.ResourceAccessException
resilience4j.circuitbreaker.instances.licensingService.recordExceptions=org.springframework.web.client.HttpServerErrorException

# Retry - organization database
resilience4j.retry.instances.retryOrganizationDatabase.maxRetryAttempts=5
resilience4j.retry.instances.retryOrganizationDatabase.retry-exceptions=java.util.concurrent.TimeoutException
resilience4j.retry.instances.retryOrganizationDatabase.waitDuration=10000

#Bulkhead - organization database
resilience4j.bulkhead.instances.bulkheadOrganizationDatabase.max-wait-duration=10ms
resilience4j.bulkhead.instances.bulkheadOrganizationDatabase.max-concurrent-calls=20
resilience4j.thread-pool-bulkhead.instances.bulkheadOrganizationDatabase.max-thread-pool-size=1
resilience4j.thread-pool-bulkhead.instances.bulkheadOrganizationDatabase.core-thread-pool-size=1
resilience4j.thread-pool-bulkhead.instances.bulkheadOrganizationDatabase.queue-capacity=20

# Retry - feign client
resilience4j.retry.instances.retryLicenseService.maxRetryAttempts=5
resilience4j.retry.instances.retryLicenseService.retry-exceptions=java.util.concurrent.TimeoutException
resilience4j.retry.instances.retryLicenseService.waitDuration=10000

#Bulkhead - feign client
resilience4j.bulkhead.instances.bulkheadLicensingService.max-wait-duration=10ms
resilience4j.bulkhead.instances.bulkheadLicensingService.max-concurrent-calls=20
resilience4j.thread-pool-bulkhead.instances.bulkheadLicensingService.max-thread-pool-size=1
resilience4j.thread-pool-bulkhead.instances.bulkheadLicensingService.core-thread-pool-size=1
resilience4j.thread-pool-bulkhead.instances.bulkheadLicensingService.queue-capacity=20
resilience4j.thread-pool-bulkhead.instances.bulkheadLicensingService.keep-alive-duration=20ms

# Keycloak configuration
keycloak.realm=orbsec-realm
keycloak.auth-server-url=keycloak:8080/auth
keycloak.ssl-required=external
keycloak.resource=orbsec
keycloak.credentials.secret=
keycloak.use-resource-role-mappings=true
keycloak.bearer-only=true
# keycloak.credentials.secret= "--> passed as environment variable  <--"


# Kafka connection properties
spring.kafka.bootstrap-servers=broker:9092
spring.cloud.stream.kafka.binder.brokers=broker:9092
spring.cloud.stream.bindings.output.group=organizationGroup
spring.cloud.stream.bindings.output.destination=organization_events
spring.cloud.stream.bindings.output.producer.use-native-encoding=true

## Serializer
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.IntegerSerializer
spring.kafka.producer.value-serializer=com.orbsec.organizationservice.kafka.serializer.EventSerializer

# Logstash
logging.level.com.orbsec.organizationservice.OrganizationServiceApplication=INFO
logging.logstash.url=logstash:5001
# Zipkin
spring.zipkin.sender.type=kafka
spring.zipkin.baseUrl=zipkin:9411
spring.sleuth.sampler.percentage=1
